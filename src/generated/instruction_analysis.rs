// Auto-generated instruction analysis module.
// This file is generated by `build.rs` - do not edit manually.

#![allow(unused_imports)]
#![allow(dead_code)]

//! Instruction analysis utilities for register usage
//!
//! This module provides fundamental bytecode analysis functions that determine
//! which registers are read from and written to by each instruction.

use crate::generated::unified_instructions::UnifiedInstruction;

/// Information about register usage for an instruction
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct RegisterUsage {
    /// The target register that is written to (if any)
    pub target: Option<u8>,
    /// The source registers that are read from
    pub sources: Vec<u8>,
}

impl RegisterUsage {
    /// Create a new RegisterUsage with no target and no sources
    pub fn new() -> Self {
        Self {
            target: None,
            sources: Vec::new(),
        }
    }

    /// Create a RegisterUsage with a target register
    pub fn with_target(target: u8) -> Self {
        Self {
            target: Some(target),
            sources: Vec::new(),
        }
    }

    /// Add a source register
    pub fn add_source(&mut self, source: u8) {
        self.sources.push(source);
    }

    /// Create a RegisterUsage with target and sources
    pub fn new_with(target: Option<u8>, sources: Vec<u8>) -> Self {
        Self { target, sources }
    }
}

/// Analyzes an instruction to determine its register usage
pub fn analyze_register_usage(instruction: &UnifiedInstruction) -> RegisterUsage {
    match instruction {
        UnifiedInstruction::Store16 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::ThrowIfHasRestrictedGlobalProperty { operand_0: _ } => {
            RegisterUsage::new()
        }
        UnifiedInstruction::Call1 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotLessEqualN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotGreaterEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Inc {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::ToNumber {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::LoadConstStringLongIndex {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::CreateRegExp {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::Div {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::PutOwnByIndexL {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::StartGenerator {} => RegisterUsage::new(),
        UnifiedInstruction::DelById {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::PutById {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::JmpFalseLong {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::SaveGenerator { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::NewObjectWithBuffer {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
            operand_4: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::Add {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Mod {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::DelByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::JGreaterN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JLess {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JGreaterEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotGreaterN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::CompleteGenerator {} => RegisterUsage::new(),
        UnifiedInstruction::SaveGeneratorLong { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::LoadConstEmpty { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::Loadu32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Ret { operand_0 } => RegisterUsage::new_with(None, vec![*operand_0]),
        UnifiedInstruction::JStrictNotEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::StrictNeq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::StrictEq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CallLong {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::NewObject { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::GetArgumentsPropByVal {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::ConstructLong {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::CreateGeneratorClosure {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::JNotLessN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Jmp { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::BitOr {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Greater {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateEnvironment { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::AddN {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::GetByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::GetArgumentsLength {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::ThrowIfEmpty {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::Divi32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Mul {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Mul32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JStrictEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Divu32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::IsIn {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::LShift {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Call4 {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
            operand_4,
            operand_5,
        } => RegisterUsage::new_with(
            Some(*operand_0),
            vec![*operand_1, *operand_2, *operand_3, *operand_4, *operand_5],
        ),
        UnifiedInstruction::CallDirect {
            operand_0,
            operand_1: _,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::JNotEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::LoadParam {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::LoadConstTrue { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::Loadi32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::GetPNameList {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2, *operand_3]),
        UnifiedInstruction::PutNewOwnNEByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::Negate {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::LoadConstUndefined { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::NewObjectWithParent {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::PutNewOwnByIdShort {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::NewArrayWithBufferLong {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::PutNewOwnNEById {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::JStrictNotEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Sub {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::MovLong {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0 as u8), vec![*operand_1 as u8]),
        UnifiedInstruction::StoreToEnvironmentL {
            operand_0,
            operand_1: _,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_2]),
        UnifiedInstruction::JNotLessEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::SelectObject {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotGreaterLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::SubN {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::LoadFromEnvironment {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::NewArray {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::DelByVal {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1, *operand_2]),
        UnifiedInstruction::LoadConstString {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::JNotGreaterEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::ThrowIfUndefinedInst { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::Loadi16 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::ToNumeric {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::TryPutById {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::LoadConstInt {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::JLessNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::StoreToEnvironment {
            operand_0,
            operand_1: _,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_2]),
        UnifiedInstruction::GetBuiltinClosure {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::ToInt32 {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::Sub32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::PutNewOwnByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::URshift {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateGeneratorClosureLongIndex {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::CreateAsyncClosure {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::JNotEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JmpFalse {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::SwitchImm {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
            operand_4: _,
        } => RegisterUsage::new_with(None, vec![*operand_0]),
        UnifiedInstruction::CallBuiltinLong {
            operand_0,
            operand_1: _,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::DeclareGlobalVar { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::StoreNPToEnvironment {
            operand_0,
            operand_1: _,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_2]),
        UnifiedInstruction::Debugger {} => RegisterUsage::new(),
        UnifiedInstruction::CoerceThisNS {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::RShift {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Call2 {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2, *operand_3]),
        UnifiedInstruction::Throw { operand_0 } => RegisterUsage::new_with(None, vec![*operand_0]),
        UnifiedInstruction::BitXor {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateThis {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JmpUndefinedLong {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::JLessEqualN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JGreaterEqualN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JGreaterNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Catch { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::PutOwnByVal {
            operand_0,
            operand_1,
            operand_2,
            operand_3: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1, *operand_2]),
        UnifiedInstruction::Loadi8 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Construct {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::TryGetById {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::IteratorNext {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Loadu16 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateInnerEnvironment {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::JGreaterLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateGenerator {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::CreateGeneratorLongIndex {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::NewObjectWithBufferLong {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
            operand_4: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::CreateClosure {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::LoadThisNS { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::GetNextPName {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
            operand_4,
        } => RegisterUsage::new_with(
            Some(*operand_0),
            vec![*operand_1, *operand_2, *operand_3, *operand_4],
        ),
        UnifiedInstruction::ReifyArguments { operand_0 } => {
            RegisterUsage::new_with(None, vec![*operand_0])
        }
        UnifiedInstruction::JNotLessLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::MulN {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::LessEq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotLessEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::LoadConstFalse { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::JNotGreaterEqualN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotGreaterEqualNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Less {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CallDirectLongIndex {
            operand_0,
            operand_1: _,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::GreaterEq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::DivN {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::LoadConstDouble {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::CreateAsyncClosureLongIndex {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::LoadConstBigIntLongIndex {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::TryPutByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::DirectEval {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::AddEmptyString {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::GetByVal {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::IteratorClose {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(None, vec![*operand_0]),
        UnifiedInstruction::JNotLessEqualNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::DebuggerCheckBreak {} => RegisterUsage::new(),
        UnifiedInstruction::LoadConstBigInt {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::JStrictEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JLessEqual {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Dec {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::JmpLong { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::StoreNPToEnvironmentL {
            operand_0,
            operand_1: _,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_2]),
        UnifiedInstruction::Store32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::GetNewTarget { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::AsyncBreakCheck {} => RegisterUsage::new(),
        UnifiedInstruction::JGreaterEqualNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JmpTrue {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::Unreachable {} => RegisterUsage::new(),
        UnifiedInstruction::JLessLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JLessEqualNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::InstanceOf {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::LoadConstUInt8 {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::Call {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::CallBuiltin {
            operand_0,
            operand_1: _,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::ProfilePoint { operand_0: _ } => RegisterUsage::new(),
        UnifiedInstruction::BitAnd {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::CreateClosureLongIndex {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::PutOwnGetterSetterByVal {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
            operand_4: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1, *operand_2, *operand_3]),
        UnifiedInstruction::JLessN {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Neq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::GetByIdShort {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::PutNewOwnById {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::JNotLessNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Eq {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::JLessEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::ResumeGenerator {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::GetGlobalObject { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::IteratorBegin {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::NewArrayWithBuffer {
            operand_0,
            operand_1: _,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::TypeOf {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::Store8 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::BitNot {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::GetEnvironment {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::Mov {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::GetById {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::TryGetByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::PutByVal {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1, *operand_2]),
        UnifiedInstruction::Call3 {
            operand_0,
            operand_1,
            operand_2,
            operand_3,
            operand_4,
        } => RegisterUsage::new_with(
            Some(*operand_0),
            vec![*operand_1, *operand_2, *operand_3, *operand_4],
        ),
        UnifiedInstruction::PutByIdLong {
            operand_0,
            operand_1,
            operand_2: _,
            operand_3: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::LoadParamLong {
            operand_0,
            operand_1: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![]),
        UnifiedInstruction::LoadConstNull { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::LoadConstZero { operand_0 } => {
            RegisterUsage::new_with(Some(*operand_0), vec![])
        }
        UnifiedInstruction::JmpUndefined {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::JGreater {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Not {
            operand_0,
            operand_1,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::LoadFromEnvironmentL {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1]),
        UnifiedInstruction::JNotGreater {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::Add32 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::Loadu8 {
            operand_0,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(Some(*operand_0), vec![*operand_1, *operand_2]),
        UnifiedInstruction::PutOwnByIndex {
            operand_0,
            operand_1,
            operand_2: _,
        } => RegisterUsage::new_with(None, vec![*operand_0, *operand_1]),
        UnifiedInstruction::JGreaterEqualLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JmpTrueLong {
            operand_0: _,
            operand_1,
        } => RegisterUsage::new_with(None, vec![*operand_1]),
        UnifiedInstruction::JNotLess {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
        UnifiedInstruction::JNotGreaterNLong {
            operand_0: _,
            operand_1,
            operand_2,
        } => RegisterUsage::new_with(None, vec![*operand_1, *operand_2]),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_arithmetic_register_usage() {
        let inst = UnifiedInstruction::Add {
            operand_0: 5,
            operand_1: 1,
            operand_2: 2,
        };
        let usage = analyze_register_usage(&inst);
        assert_eq!(usage.target, Some(5));
        assert_eq!(usage.sources, vec![1, 2]);
    }

    #[test]
    fn test_load_constant_register_usage() {
        let inst = UnifiedInstruction::LoadConstTrue { operand_0: 3 };
        let usage = analyze_register_usage(&inst);
        assert_eq!(usage.target, Some(3));
        assert!(usage.sources.is_empty());
    }

    #[test]
    fn test_jump_register_usage() {
        let inst = UnifiedInstruction::JmpFalse {
            operand_0: 1,  // address
            operand_1: 42, // register
        };
        let usage = analyze_register_usage(&inst);
        assert_eq!(usage.target, None);
        assert_eq!(usage.sources, vec![42]);
    }

    #[test]
    fn test_store_register_usage() {
        let inst = UnifiedInstruction::PutByVal {
            operand_0: 1, // object
            operand_1: 2, // key
            operand_2: 3, // value
        };
        let usage = analyze_register_usage(&inst);
        assert_eq!(usage.target, None);
        assert_eq!(usage.sources, vec![1, 2, 3]);
    }
}
