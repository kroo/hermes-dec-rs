// Auto-generated unified instruction definitions.
// This file is generated by `build.rs` - do not edit manually.

#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(dead_code)]

use anyhow::Result;
use scroll::{Pread, LE};
use serde::{Deserialize, Serialize};

macro_rules! OPERAND1_StringId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Addr32_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i32>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND6_Reg8_Reg8_Reg8_Reg8_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_5 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
            operand_5: operand_5,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_BigIntId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_FunctionId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_StringId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_Reg8_UInt8_StringId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_UInt16_UInt16_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_UInt8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt8_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<i32>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_StringId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_StringId8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg32_Reg32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_Imm32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Addr8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_StringId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Addr8_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_Reg8_UInt8_StringId8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt8_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND5_Reg8_Reg8_Reg8_Reg8_UInt8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_UInt8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_StringId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_Reg8_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt8_UInt8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND1_Addr8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_UInt16_UInt16_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND1_Addr32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND1_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_BigIntId32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_Reg8_Reg8_UInt8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_StringId32_StringId32_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_Double {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<f64>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Addr32_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<i32>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND1_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt8_FunctionId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND5_Reg8_UInt16_UInt16_UInt32_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u32>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_UInt16_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_FunctionId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND5_Reg8_UInt16_UInt16_UInt16_UInt16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u16>($offset, LE)?;
        let operand_4 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
            operand_4: operand_4,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND4_Reg8_Reg8_UInt8_StringId16 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_3 = $bytes.gread_with::<u16>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
            operand_3: operand_3,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND2_Reg8_Reg8 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! OPERAND3_Reg8_Reg8_UInt32 {
    ($variant:ident, $bytes:expr, $offset:expr) => {{
        let start = *$offset;
        let operand_0 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_1 = $bytes.gread_with::<u8>($offset, LE)?;
        let operand_2 = $bytes.gread_with::<u32>($offset, LE)?;
        let instr = UnifiedInstruction::$variant {
            operand_0: operand_0,
            operand_1: operand_1,
            operand_2: operand_2,
        };
        let bytes_read = *$offset - start;
        Ok((instr, bytes_read))
    }};
}
macro_rules! define_instructions {
    ($($name:ident { operands: [$($op:ident: $op_ty:ty),*], category: $cat:expr }),*) => {
        #[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
        pub enum UnifiedInstruction {
            $($name { $($op: $op_ty,)* }),*
        }

        impl UnifiedInstruction {
            pub fn name(&self) -> &'static str {
                match self {
                    $(UnifiedInstruction::$name { .. } => stringify!($name)),*
                }
            }

            pub fn category(&self) -> &'static str {
                match self {
                    $(UnifiedInstruction::$name { .. } => $cat),*
                }
            }

            pub fn size(&self) -> usize {
                match self {
                    UnifiedInstruction::CreateGeneratorLongIndex { .. } => 7, // Reg8, Reg8, FunctionId32
                    UnifiedInstruction::CreateAsyncClosure { .. } => 5, // Reg8, Reg8, FunctionId16
                    UnifiedInstruction::GreaterEq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::CreateGenerator { .. } => 5, // Reg8, Reg8, FunctionId16
                    UnifiedInstruction::PutOwnGetterSetterByVal { .. } => 6, // Reg8, Reg8, Reg8, Reg8, UInt8
                    UnifiedInstruction::Unreachable { .. } => 1, //
                    UnifiedInstruction::LoadConstFalse { .. } => 2, // Reg8
                    UnifiedInstruction::BitAnd { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::DirectEval { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::JNotGreaterEqualN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::GetBuiltinClosure { .. } => 3, // Reg8, UInt8
                    UnifiedInstruction::Not { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::PutNewOwnByIdLong { .. } => 7, // Reg8, Reg8, StringId32
                    UnifiedInstruction::LoadConstString { .. } => 4, // Reg8, StringId16
                    UnifiedInstruction::LoadConstUInt8 { .. } => 3, // Reg8, UInt8
                    UnifiedInstruction::DeclareGlobalVar { .. } => 5, // StringId32
                    UnifiedInstruction::StoreToEnvironmentL { .. } => 5, // Reg8, UInt16, Reg8
                    UnifiedInstruction::JNotGreater { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::AddEmptyString { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::CreateGeneratorClosureLongIndex { .. } => 7, // Reg8, Reg8, FunctionId32
                    UnifiedInstruction::StoreNPToEnvironment { .. } => 4, // Reg8, UInt8, Reg8
                    UnifiedInstruction::CreateRegExp { .. } => 14, // Reg8, StringId32, StringId32, UInt32
                    UnifiedInstruction::Loadu32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::LoadConstBigInt { .. } => 4, // Reg8, BigIntId16
                    UnifiedInstruction::CallLong { .. } => 7, // Reg8, Reg8, UInt32
                    UnifiedInstruction::JLessEqualN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::GetGlobalObject { .. } => 2, // Reg8
                    UnifiedInstruction::GetArgumentsLength { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::MulN { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::LoadFromEnvironmentL { .. } => 5, // Reg8, Reg8, UInt16
                    UnifiedInstruction::Sub { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::DelById { .. } => 5, // Reg8, Reg8, StringId16
                    UnifiedInstruction::Construct { .. } => 4, // Reg8, Reg8, UInt8
                    UnifiedInstruction::ConstructLong { .. } => 7, // Reg8, Reg8, UInt32
                    UnifiedInstruction::LoadConstZero { .. } => 2, // Reg8
                    UnifiedInstruction::JmpUndefined { .. } => 3, // Addr8, Reg8
                    UnifiedInstruction::JLessEqualNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::JGreater { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::JGreaterEqualNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::Loadu8 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::TryPutById { .. } => 6, // Reg8, Reg8, UInt8, StringId16
                    UnifiedInstruction::JNotLessEqualNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::JGreaterEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::StoreToEnvironment { .. } => 4, // Reg8, UInt8, Reg8
                    UnifiedInstruction::SubN { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Neq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::GetByVal { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::GetNextPName { .. } => 6, // Reg8, Reg8, Reg8, Reg8, Reg8
                    UnifiedInstruction::BitOr { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::NewArray { .. } => 4, // Reg8, UInt16
                    UnifiedInstruction::LoadConstTrue { .. } => 2, // Reg8
                    UnifiedInstruction::Call { .. } => 4, // Reg8, Reg8, UInt8
                    UnifiedInstruction::LoadFromEnvironment { .. } => 4, // Reg8, Reg8, UInt8
                    UnifiedInstruction::DelByVal { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::CallDirectLongIndex { .. } => 7, // Reg8, UInt8, UInt32
                    UnifiedInstruction::LShift { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterEqualNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::BitNot { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::Eq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotLessEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::JNotEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::SaveGeneratorLong { .. } => 5, // Addr32
                    UnifiedInstruction::IteratorNext { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::NewObjectWithParent { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::PutByVal { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::SwitchImm { .. } => 18, // Reg8, UInt32, Addr32, UInt32, UInt32
                    UnifiedInstruction::LoadConstStringLongIndex { .. } => 6, // Reg8, StringId32
                    UnifiedInstruction::ThrowIfEmpty { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::StrictEq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::LoadConstNull { .. } => 2, // Reg8
                    UnifiedInstruction::JmpUndefinedLong { .. } => 6, // Addr32, Reg8
                    UnifiedInstruction::JmpTrueLong { .. } => 6, // Addr32, Reg8
                    UnifiedInstruction::Add { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::LoadThisNS { .. } => 2, // Reg8
                    UnifiedInstruction::LoadConstDouble { .. } => 10, // Reg8, Double
                    UnifiedInstruction::GetByIdLong { .. } => 8, // Reg8, Reg8, UInt8, StringId32
                    UnifiedInstruction::MovLong { .. } => 9, // Reg32, Reg32
                    UnifiedInstruction::AddN { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::PutNewOwnById { .. } => 5, // Reg8, Reg8, StringId16
                    UnifiedInstruction::Call2 { .. } => 5, // Reg8, Reg8, Reg8, Reg8
                    UnifiedInstruction::Debugger { .. } => 1, //
                    UnifiedInstruction::CreateClosureLongIndex { .. } => 7, // Reg8, Reg8, FunctionId32
                    UnifiedInstruction::CreateThis { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::PutNewOwnByIdShort { .. } => 4, // Reg8, Reg8, StringId8
                    UnifiedInstruction::IteratorClose { .. } => 3, // Reg8, UInt8
                    UnifiedInstruction::JLessNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::JNotLessN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::Call4 { .. } => 7, // Reg8, Reg8, Reg8, Reg8, Reg8, Reg8
                    UnifiedInstruction::TryGetById { .. } => 6, // Reg8, Reg8, UInt8, StringId16
                    UnifiedInstruction::Mul32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Throw { .. } => 2, // Reg8
                    UnifiedInstruction::Store8 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::StrictNeq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::ToNumber { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::Call3 { .. } => 6, // Reg8, Reg8, Reg8, Reg8, Reg8
                    UnifiedInstruction::CreateClosure { .. } => 5, // Reg8, Reg8, FunctionId16
                    UnifiedInstruction::Inc { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::Mod { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::CreateGeneratorClosure { .. } => 5, // Reg8, Reg8, FunctionId16
                    UnifiedInstruction::ThrowIfHasRestrictedGlobalProperty { .. } => 5, // StringId32
                    UnifiedInstruction::TryGetByIdLong { .. } => 8, // Reg8, Reg8, UInt8, StringId32
                    UnifiedInstruction::StartGenerator { .. } => 1, //
                    UnifiedInstruction::Divu32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::NewObject { .. } => 2, // Reg8
                    UnifiedInstruction::Greater { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotLessEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::CreateInnerEnvironment { .. } => 7, // Reg8, Reg8, UInt32
                    UnifiedInstruction::JGreaterEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::Div { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotLessEqualN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::Loadu16 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Dec { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::ProfilePoint { .. } => 3, // UInt16
                    UnifiedInstruction::JGreaterNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::NewArrayWithBufferLong { .. } => 10, // Reg8, UInt16, UInt16, UInt32
                    UnifiedInstruction::ToNumeric { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::JStrictNotEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::JNotLess { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::Loadi8 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::LoadParamLong { .. } => 6, // Reg8, UInt32
                    UnifiedInstruction::URshift { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JLess { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::CallBuiltinLong { .. } => 7, // Reg8, UInt8, UInt32
                    UnifiedInstruction::LoadConstBigIntLongIndex { .. } => 6, // Reg8, BigIntId32
                    UnifiedInstruction::JStrictEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::Call1 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JmpFalse { .. } => 3, // Addr8, Reg8
                    UnifiedInstruction::JmpLong { .. } => 5, // Addr32
                    UnifiedInstruction::JLessEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::PutNewOwnNEByIdLong { .. } => 7, // Reg8, Reg8, StringId32
                    UnifiedInstruction::InstanceOf { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotLessNLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::GetPNameList { .. } => 5, // Reg8, Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::LoadConstUndefined { .. } => 2, // Reg8
                    UnifiedInstruction::ThrowIfUndefinedInst { .. } => 2, // Reg8
                    UnifiedInstruction::NewObjectWithBufferLong { .. } => 14, // Reg8, UInt16, UInt16, UInt32, UInt32
                    UnifiedInstruction::GetById { .. } => 6, // Reg8, Reg8, UInt8, StringId16
                    UnifiedInstruction::NewArrayWithBuffer { .. } => 8, // Reg8, UInt16, UInt16, UInt16
                    UnifiedInstruction::JmpTrue { .. } => 3, // Addr8, Reg8
                    UnifiedInstruction::JGreaterEqualN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::IteratorBegin { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::LoadParam { .. } => 3, // Reg8, UInt8
                    UnifiedInstruction::TryPutByIdLong { .. } => 8, // Reg8, Reg8, UInt8, StringId32
                    UnifiedInstruction::Loadi16 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::CreateAsyncClosureLongIndex { .. } => 7, // Reg8, Reg8, FunctionId32
                    UnifiedInstruction::JGreaterLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::GetArgumentsPropByVal { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::DebuggerCheckBreak { .. } => 1, //
                    UnifiedInstruction::JmpFalseLong { .. } => 6, // Addr32, Reg8
                    UnifiedInstruction::LessEq { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::ReifyArguments { .. } => 2, // Reg8
                    UnifiedInstruction::SaveGenerator { .. } => 2, // Addr8
                    UnifiedInstruction::Add32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Store32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::SelectObject { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Mul { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::PutOwnByIndex { .. } => 4, // Reg8, Reg8, UInt8
                    UnifiedInstruction::PutOwnByIndexL { .. } => 7, // Reg8, Reg8, UInt32
                    UnifiedInstruction::CallBuiltin { .. } => 4, // Reg8, UInt8, UInt8
                    UnifiedInstruction::JGreaterN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::JNotGreaterN { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::PutById { .. } => 6, // Reg8, Reg8, UInt8, StringId16
                    UnifiedInstruction::Ret { .. } => 2, // Reg8
                    UnifiedInstruction::LoadConstEmpty { .. } => 2, // Reg8
                    UnifiedInstruction::CreateEnvironment { .. } => 2, // Reg8
                    UnifiedInstruction::LoadConstInt { .. } => 6, // Reg8, Imm32
                    UnifiedInstruction::CallDirect { .. } => 5, // Reg8, UInt8, FunctionId16
                    UnifiedInstruction::CompleteGenerator { .. } => 1, //
                    UnifiedInstruction::Divi32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JStrictEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::Less { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::BitXor { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::AsyncBreakCheck { .. } => 1, //
                    UnifiedInstruction::Mov { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::Negate { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::GetNewTarget { .. } => 2, // Reg8
                    UnifiedInstruction::CoerceThisNS { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::PutOwnByVal { .. } => 5, // Reg8, Reg8, Reg8, UInt8
                    UnifiedInstruction::JLessEqual { .. } => 4, // Addr8, Reg8, Reg8
                    UnifiedInstruction::DivN { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::Catch { .. } => 2, // Reg8
                    UnifiedInstruction::GetEnvironment { .. } => 3, // Reg8, UInt8
                    UnifiedInstruction::Jmp { .. } => 2, // Addr8
                    UnifiedInstruction::ResumeGenerator { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::Sub32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::JNotLessLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::PutByIdLong { .. } => 8, // Reg8, Reg8, UInt8, StringId32
                    UnifiedInstruction::RShift { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::IsIn { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::PutNewOwnNEById { .. } => 5, // Reg8, Reg8, StringId16
                    UnifiedInstruction::JEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::JLessLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::Loadi32 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::TypeOf { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::JStrictNotEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::NewObjectWithBuffer { .. } => 10, // Reg8, UInt16, UInt16, UInt16, UInt16
                    UnifiedInstruction::StoreNPToEnvironmentL { .. } => 5, // Reg8, UInt16, Reg8
                    UnifiedInstruction::ToInt32 { .. } => 3, // Reg8, Reg8
                    UnifiedInstruction::GetByIdShort { .. } => 5, // Reg8, Reg8, UInt8, StringId8
                    UnifiedInstruction::JNotEqualLong { .. } => 7, // Addr32, Reg8, Reg8
                    UnifiedInstruction::Store16 { .. } => 4, // Reg8, Reg8, Reg8
                    UnifiedInstruction::DelByIdLong { .. } => 7, // Reg8, Reg8, StringId32
                    UnifiedInstruction::JLessN { .. } => 4, // Addr8, Reg8, Reg8
                }
            }

            pub fn format_instruction(&self, hbc_file: &crate::hbc::HbcFile) -> String {
                let mut operands: Vec<String> = Vec::new();
                match self {
                    UnifiedInstruction::CreateGeneratorLongIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::CreateAsyncClosure { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::GreaterEq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CreateGenerator { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::PutOwnGetterSetterByVal { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                        operands.push(operand_4.to_string());
                    }
                    UnifiedInstruction::Unreachable {  } => { /* No operands */
                    }
                    UnifiedInstruction::LoadConstFalse { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::BitAnd { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::DirectEval { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JNotGreaterEqualN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetBuiltinClosure { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::Not { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::PutNewOwnByIdLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::LoadConstString { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(hbc_file.strings.get(*operand_1 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::LoadConstUInt8 { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::DeclareGlobalVar { operand_0 } => {
                        operands.push(hbc_file.strings.get(*operand_0 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::StoreToEnvironmentL { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreater { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::AddEmptyString { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::CreateGeneratorClosureLongIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::StoreNPToEnvironment { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CreateRegExp { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(hbc_file.strings.get(*operand_1 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                        operands.push(operand_3.to_string());
                    }
                    UnifiedInstruction::Loadu32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadConstBigInt { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(hbc_file.bigints.get(*operand_1 as u32).map(|b| b.clone()).map_or_else(|s| format!("{}", s), |b| b.to_string()));
                    }
                    UnifiedInstruction::CallLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::JLessEqualN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetGlobalObject { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::GetArgumentsLength { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::MulN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadFromEnvironmentL { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::Sub { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::DelById { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::Construct { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::ConstructLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::LoadConstZero { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::JmpUndefined { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JLessEqualNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JGreater { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreaterEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JGreaterEqualNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Loadu8 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::TryPutById { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::JNotLessEqualNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JGreaterEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::StoreToEnvironment { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::SubN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Neq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetByVal { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetNextPName { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                        operands.push(format!("r{}", operand_4));
                    }
                    UnifiedInstruction::BitOr { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreaterLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::NewArray { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::LoadConstTrue { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::Call { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::LoadFromEnvironment { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::DelByVal { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CallDirectLongIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::LShift { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreaterEqualNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::BitNot { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Eq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::SaveGeneratorLong { operand_0 } => {
                        operands.push(format!("[{}]", operand_0));
                    }
                    UnifiedInstruction::IteratorNext { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::NewObjectWithParent { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::PutByVal { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::SwitchImm { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(format!("[{}]", operand_2));
                        operands.push(operand_3.to_string());
                        operands.push(operand_4.to_string());
                    }
                    UnifiedInstruction::LoadConstStringLongIndex { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(hbc_file.strings.get(*operand_1 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::ThrowIfEmpty { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::StrictEq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadConstNull { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::JmpUndefinedLong { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JmpTrueLong { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Add { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadThisNS { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::LoadConstDouble { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::GetByIdLong { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::MovLong { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::AddN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutNewOwnById { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::Call2 { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                    }
                    UnifiedInstruction::Debugger {  } => { /* No operands */
                    }
                    UnifiedInstruction::CreateClosureLongIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::CreateThis { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutNewOwnByIdShort { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::IteratorClose { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::JLessNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Call4 { operand_0, operand_1, operand_2, operand_3, operand_4, operand_5 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                        operands.push(format!("r{}", operand_4));
                        operands.push(format!("r{}", operand_5));
                    }
                    UnifiedInstruction::TryGetById { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::Mul32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Throw { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::Store8 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::StrictNeq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::ToNumber { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Call3 { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                        operands.push(format!("r{}", operand_4));
                    }
                    UnifiedInstruction::CreateClosure { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::Inc { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Mod { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CreateGeneratorClosure { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::ThrowIfHasRestrictedGlobalProperty { operand_0 } => {
                        operands.push(hbc_file.strings.get(*operand_0 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::TryGetByIdLong { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::StartGenerator {  } => { /* No operands */
                    }
                    UnifiedInstruction::Divu32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::NewObject { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::Greater { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CreateInnerEnvironment { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::JGreaterEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Div { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessEqualN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Loadu16 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Dec { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::ProfilePoint { operand_0 } => {
                        operands.push(operand_0.to_string());
                    }
                    UnifiedInstruction::JGreaterNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::NewArrayWithBufferLong { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                        operands.push(operand_3.to_string());
                    }
                    UnifiedInstruction::ToNumeric { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JStrictNotEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLess { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Loadi8 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadParamLong { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::URshift { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JLess { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreaterNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CallBuiltinLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::LoadConstBigIntLongIndex { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(hbc_file.bigints.get(*operand_1 as u32).map(|b| b.clone()).map_or_else(|s| format!("{}", s), |b| b.to_string()));
                    }
                    UnifiedInstruction::JStrictEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Call1 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JmpFalse { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JmpLong { operand_0 } => {
                        operands.push(format!("[{}]", operand_0));
                    }
                    UnifiedInstruction::JLessEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutNewOwnNEByIdLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::InstanceOf { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessNLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetPNameList { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(format!("r{}", operand_3));
                    }
                    UnifiedInstruction::JNotGreaterEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::LoadConstUndefined { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::ThrowIfUndefinedInst { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::NewObjectWithBufferLong { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                        operands.push(operand_3.to_string());
                        operands.push(operand_4.to_string());
                    }
                    UnifiedInstruction::GetById { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::NewArrayWithBuffer { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                        operands.push(operand_3.to_string());
                    }
                    UnifiedInstruction::JmpTrue { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JGreaterEqualN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::IteratorBegin { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::LoadParam { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::TryPutByIdLong { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::Loadi16 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::CreateAsyncClosureLongIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::JGreaterLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::GetArgumentsPropByVal { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::DebuggerCheckBreak {  } => { /* No operands */
                    }
                    UnifiedInstruction::JmpFalseLong { operand_0, operand_1 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::LessEq { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::ReifyArguments { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::SaveGenerator { operand_0 } => {
                        operands.push(format!("[{}]", operand_0));
                    }
                    UnifiedInstruction::Add32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Store32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::SelectObject { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Mul { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutOwnByIndex { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::PutOwnByIndexL { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::CallBuiltin { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                    }
                    UnifiedInstruction::JGreaterN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotGreaterN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutById { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::Ret { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::LoadConstEmpty { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::CreateEnvironment { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::LoadConstInt { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::CallDirect { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(hbc_file.functions.get_function_name(*operand_2 as u32, &hbc_file.strings).map(|name| name.clone()).map_or_else(|| format!("Function<unknown>{}", operand_2), |name| format!("Function<{}>{}", name, operand_2)));
                    }
                    UnifiedInstruction::CompleteGenerator {  } => { /* No operands */
                    }
                    UnifiedInstruction::Divi32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JStrictEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Less { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::BitXor { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::AsyncBreakCheck {  } => { /* No operands */
                    }
                    UnifiedInstruction::Mov { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Negate { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::GetNewTarget { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::CoerceThisNS { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::PutOwnByVal { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                        operands.push(operand_3.to_string());
                    }
                    UnifiedInstruction::JLessEqual { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::DivN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Catch { operand_0 } => {
                        operands.push(format!("r{}", operand_0));
                    }
                    UnifiedInstruction::GetEnvironment { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                    }
                    UnifiedInstruction::Jmp { operand_0 } => {
                        operands.push(format!("[{}]", operand_0));
                    }
                    UnifiedInstruction::ResumeGenerator { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::Sub32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JNotLessLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutByIdLong { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::RShift { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::IsIn { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::PutNewOwnNEById { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::JEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::JLessLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Loadi32 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::TypeOf { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::JStrictNotEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::NewObjectWithBuffer { operand_0, operand_1, operand_2, operand_3, operand_4 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(operand_2.to_string());
                        operands.push(operand_3.to_string());
                        operands.push(operand_4.to_string());
                    }
                    UnifiedInstruction::StoreNPToEnvironmentL { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(operand_1.to_string());
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::ToInt32 { operand_0, operand_1 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                    }
                    UnifiedInstruction::GetByIdShort { operand_0, operand_1, operand_2, operand_3 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(operand_2.to_string());
                        operands.push(hbc_file.strings.get(*operand_3 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::JNotEqualLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::Store16 { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                    UnifiedInstruction::DelByIdLong { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("r{}", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(hbc_file.strings.get(*operand_2 as u32).map(|s| format!("\"{}\"", s)).unwrap_or_else(|_| format!("<string_error>")));
                    }
                    UnifiedInstruction::JLessN { operand_0, operand_1, operand_2 } => {
                        operands.push(format!("[{}]", operand_0));
                        operands.push(format!("r{}", operand_1));
                        operands.push(format!("r{}", operand_2));
                    }
                }
                format!("{:<17} {}", self.name(), operands.join(", "))
            }

            pub fn parse(version: u32, opcode: u8, bytes: &[u8], offset: &mut usize) -> Result<(Self, usize)> {
                match opcode {
                    0 => {
                        if (51..=82).contains(&version) {
                            return OPERAND5_Reg8_UInt16_UInt16_UInt16_UInt16!(NewObjectWithBuffer, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return Ok((UnifiedInstruction::Unreachable {}, 0));
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    1 => {
                        if (51..=82).contains(&version) {
                            return OPERAND5_Reg8_UInt16_UInt16_UInt32_UInt32!(NewObjectWithBufferLong, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND5_Reg8_UInt16_UInt16_UInt16_UInt16!(NewObjectWithBuffer, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    2 => {
                        if (51..=82).contains(&version) {
                            return OPERAND1_Reg8!(NewObject, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND5_Reg8_UInt16_UInt16_UInt32_UInt32!(NewObjectWithBufferLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    3 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(NewObjectWithParent, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND1_Reg8!(NewObject, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    4 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_UInt16_UInt16_UInt16!(NewArrayWithBuffer, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(NewObjectWithParent, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    5 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_UInt16_UInt16_UInt32!(NewArrayWithBufferLong, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND4_Reg8_UInt16_UInt16_UInt16!(NewArrayWithBuffer, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    6 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_UInt16!(NewArray, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND4_Reg8_UInt16_UInt16_UInt32!(NewArrayWithBufferLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    7 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Mov, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt16!(NewArray, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    8 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg32_Reg32!(MovLong, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Mov, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    9 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Negate, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg32_Reg32!(MovLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    10 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Not, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Negate, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    11 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(BitNot, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Not, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    12 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(TypeOf, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(BitNot, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    13 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Eq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(TypeOf, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    14 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(StrictEq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Eq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    15 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Neq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(StrictEq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    16 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(StrictNeq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Neq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    17 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Less, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(StrictNeq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    18 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(LessEq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Less, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    19 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Greater, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(LessEq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    20 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GreaterEq, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Greater, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    21 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GreaterEq, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    22 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(AddN, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    23 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(AddN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    24 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(MulN, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    25 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Div, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(MulN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    26 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DivN, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Div, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    27 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mod, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DivN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    28 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mod, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    29 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SubN, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    30 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(LShift, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SubN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    31 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(RShift, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(LShift, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    32 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(URshift, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(RShift, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    33 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitAnd, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(URshift, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    34 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitXor, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitAnd, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    35 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitOr, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitXor, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    36 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(InstanceOf, bytes, offset);
                        }
                        if (83..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(BitOr, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    37 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IsIn, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(InstanceOf, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Inc, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    38 => {
                        if (51..=82).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetEnvironment, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IsIn, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(Dec, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    39 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreToEnvironment, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetEnvironment, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(InstanceOf, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    40 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreToEnvironmentL, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreToEnvironment, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IsIn, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    41 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreNPToEnvironment, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreToEnvironmentL, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    42 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreNPToEnvironmentL, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreNPToEnvironment, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreToEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    43 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(LoadFromEnvironment, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreNPToEnvironmentL, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreToEnvironmentL, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    44 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt16!(LoadFromEnvironmentL, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(LoadFromEnvironment, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_Reg8!(StoreNPToEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    45 => {
                        if (51..=82).contains(&version) {
                            return OPERAND1_Reg8!(GetGlobalObject, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt16!(LoadFromEnvironmentL, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt16_Reg8!(StoreNPToEnvironmentL, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    46 => {
                        if (51..=82).contains(&version) {
                            return OPERAND1_Reg8!(GetNewTarget, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(GetGlobalObject, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(LoadFromEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    47 => {
                        if (51..=82).contains(&version) {
                            return OPERAND1_Reg8!(CreateEnvironment, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(GetNewTarget, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt16!(LoadFromEnvironmentL, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    48 => {
                        if (51..=82).contains(&version) {
                            return OPERAND1_StringId32!(DeclareGlobalVar, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(CreateEnvironment, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND1_Reg8!(GetGlobalObject, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    49 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId8!(GetByIdShort, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_StringId32!(DeclareGlobalVar, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND1_Reg8!(GetNewTarget, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    50 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(GetById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId8!(GetByIdShort, bytes, offset);
                        }
                        if (86..=96).contains(&version) {
                            return OPERAND1_Reg8!(CreateEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    51 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(GetByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(GetById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND1_StringId32!(DeclareGlobalVar, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(CreateInnerEnvironment, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    52 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryGetById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(GetByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId8!(GetByIdShort, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_StringId32!(DeclareGlobalVar, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    53 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryGetByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryGetById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(GetById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_StringId32!(ThrowIfHasRestrictedGlobalProperty, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    54 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(PutById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryGetByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(GetByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId8!(GetByIdShort, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    55 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(PutByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(PutById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryGetById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(GetById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    56 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryPutById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(PutByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryGetByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(GetByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    57 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryPutByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryPutById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(PutById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryGetById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    58 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId8!(PutNewOwnByIdShort, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryPutByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(PutByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryGetByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    59 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId8!(PutNewOwnByIdShort, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryPutById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(PutById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    60 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryPutByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(PutByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    61 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnNEById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId8!(PutNewOwnByIdShort, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId16!(TryPutById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    62 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnNEByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnNEById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_UInt8_StringId32!(TryPutByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    63 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(PutOwnByIndex, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnNEByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId8!(PutNewOwnByIdShort, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    64 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(PutOwnByIndexL, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(PutOwnByIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnNEById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    65 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_UInt8!(PutOwnByVal, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(PutOwnByIndexL, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnNEByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    66 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(DelById, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_UInt8!(PutOwnByVal, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(PutOwnByIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(PutNewOwnNEById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    67 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(DelByIdLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(DelById, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(PutOwnByIndexL, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(PutNewOwnNEByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    68 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetByVal, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(DelByIdLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_UInt8!(PutOwnByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(PutOwnByIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    69 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(PutByVal, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetByVal, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(DelById, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(PutOwnByIndexL, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    70 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DelByVal, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(PutByVal, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(DelByIdLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_UInt8!(PutOwnByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    71 => {
                        if (51..=82).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_UInt8!(PutOwnGetterSetterByVal, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DelByVal, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId16!(DelById, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    72 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(GetPNameList, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_UInt8!(PutOwnGetterSetterByVal, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(PutByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_StringId32!(DelByIdLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    73 => {
                        if (51..=82).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(GetNextPName, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(GetPNameList, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DelByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    74 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Call, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(GetNextPName, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_UInt8!(PutOwnGetterSetterByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(PutByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    75 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Construct, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Call, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(GetPNameList, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(DelByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    76 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Call1, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Construct, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(GetNextPName, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_UInt8!(PutOwnGetterSetterByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    77 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_FunctionId16!(CallDirect, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Call1, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Call, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(GetPNameList, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    78 => {
                        if (51..=82).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(Call2, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_FunctionId16!(CallDirect, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Construct, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(GetNextPName, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    79 => {
                        if (51..=82).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(Call3, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(Call2, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Call1, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Call, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    80 => {
                        if (51..=82).contains(&version) {
                            return OPERAND6_Reg8_Reg8_Reg8_Reg8_Reg8_Reg8!(Call4, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(Call3, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_UInt8_FunctionId16!(CallDirect, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt8!(Construct, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    81 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(CallLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND6_Reg8_Reg8_Reg8_Reg8_Reg8_Reg8!(Call4, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(Call2, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Call1, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    82 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(ConstructLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(CallLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(Call3, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_FunctionId16!(CallDirect, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    83 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallDirectLongIndex, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(ConstructLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND6_Reg8_Reg8_Reg8_Reg8_Reg8_Reg8!(Call4, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_Reg8_Reg8_Reg8!(Call2, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    84 => {
                        if (51..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt8!(CallBuiltin, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallDirectLongIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(CallLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND5_Reg8_Reg8_Reg8_Reg8_Reg8!(Call3, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    85 => {
                        if (51..=73).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        if (80..=82).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallBuiltinLong, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt8!(CallBuiltin, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(ConstructLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND6_Reg8_Reg8_Reg8_Reg8_Reg8_Reg8!(Call4, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    86 => {
                        if (51..=73).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        if (80..=81).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        if (82..=82).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetBuiltinClosure, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallBuiltinLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallDirectLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(CallLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    87 => {
                        if (51..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        if (80..=81).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        if (82..=82).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetBuiltinClosure, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt8!(CallBuiltin, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_UInt32!(ConstructLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    88 => {
                        if (51..=73).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        if (80..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        if (82..=82).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallBuiltinLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallDirectLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    89 => {
                        if (51..=58).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(ThrowIfUndefinedInst, bytes, offset);
                        }
                        if (80..=81).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        if (82..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetBuiltinClosure, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt8!(CallBuiltin, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    90 => {
                        if (51..=58).contains(&version) {
                            return Ok((UnifiedInstruction::DebuggerCheckBreak {}, 0));
                        }
                        if (59..=73).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (80..=81).contains(&version) {
                            return OPERAND1_Reg8!(ThrowIfUndefinedInst, bytes, offset);
                        }
                        if (82..=82).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_UInt8_UInt32!(CallBuiltinLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    91 => {
                        if (51..=58).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (59..=59).contains(&version) {
                            return Ok((UnifiedInstruction::DebuggerCheckBreak {}, 0));
                        }
                        if (61..=73).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        if (80..=80).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (81..=82).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ThrowIfEmpty, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(GetBuiltinClosure, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    92 => {
                        if (51..=58).contains(&version) {
                            return Ok((UnifiedInstruction::Unreachable {}, 0));
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        if (81..=82).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ThrowIfEmpty, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(Ret, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    93 => {
                        if (51..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return Ok((UnifiedInstruction::Unreachable {}, 0));
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (81..=82).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        if (83..=85).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(Catch, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    94 => {
                        if (51..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return Ok((UnifiedInstruction::Unreachable {}, 0));
                        }
                        if (81..=82).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (83..=85).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ThrowIfEmpty, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(DirectEval, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    95 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        if (81..=82).contains(&version) {
                            return Ok((UnifiedInstruction::Unreachable {}, 0));
                        }
                        if (83..=85).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(Throw, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    96 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        if (81..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ThrowIfEmpty, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    97 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        if (81..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return Ok((UnifiedInstruction::Debugger {}, 0));
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    98 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        if (81..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return Ok((UnifiedInstruction::AsyncBreakCheck {}, 0));
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    99 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (81..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_UInt16!(ProfilePoint, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    100 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateAsyncClosure, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateClosure, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    101 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateAsyncClosureLongIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateClosureLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    102 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateAsyncClosure, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGeneratorClosure, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    103 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateAsyncClosureLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorClosureLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    104 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateAsyncClosure, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    105 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateAsyncClosureLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    106 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(CreateThis, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    107 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(SelectObject, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    108 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadParam, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    109 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstEmpty, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt32!(LoadParamLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    110 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (86..=90).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(LoadConstUInt8, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    111 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstEmpty, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_BigIntId16!(LoadConstBigInt, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Imm32!(LoadConstInt, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    112 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_BigIntId32!(LoadConstBigIntLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Double!(LoadConstDouble, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    113 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstEmpty, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_BigIntId16!(LoadConstBigInt, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    114 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_BigIntId32!(LoadConstBigIntLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    115 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstEmpty, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_StringId16!(LoadConstString, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    116 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_StringId32!(LoadConstStringLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    117 => {
                        if (51..=51).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstEmpty, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    118 => {
                        if (51..=51).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstUndefined, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    119 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstNull, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    120 => {
                        if (51..=51).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstTrue, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    121 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstFalse, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    122 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadConstZero, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    123 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(CoerceThisNS, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    124 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumeric, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(LoadThisNS, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    125 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (81..=81).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumber, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    126 => {
                        if (51..=51).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (59..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToNumeric, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    127 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (82..=85).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ToInt32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    128 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(AddEmptyString, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    129 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (86..=86).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(GetArgumentsPropByVal, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    130 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(GetArgumentsLength, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    131 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Reg8!(ReifyArguments, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    132 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND4_Reg8_StringId32_StringId32_UInt32!(CreateRegExp, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    133 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND5_Reg8_UInt32_Addr32_UInt32_UInt32!(SwitchImm, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    134 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        if (92..=96).contains(&version) {
                            return Ok((UnifiedInstruction::StartGenerator {}, 0));
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    135 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(ResumeGenerator, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    136 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return Ok((UnifiedInstruction::CompleteGenerator {}, 0));
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    137 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId16!(CreateGenerator, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    138 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_FunctionId32!(CreateGeneratorLongIndex, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    139 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_Reg8!(IteratorBegin, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    140 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(IteratorNext, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    141 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Reg8_UInt8!(IteratorClose, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    142 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Addr8!(Jmp, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    143 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Addr32!(JmpLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    144 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpTrue, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    145 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpTrueLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    146 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpFalse, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    147 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpFalseLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    148 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr8_Reg8!(JmpUndefined, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    149 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND2_Addr32_Reg8!(JmpUndefinedLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    150 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Addr8!(SaveGenerator, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    151 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND1_Addr32!(SaveGeneratorLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    152 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLess, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    153 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    154 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLess, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    155 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    156 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    157 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    158 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    159 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    160 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    161 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    162 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    163 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    164 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JLessEqualN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    165 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JLessEqualNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    166 => {
                        if (51..=51).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotLessEqualN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    167 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotLessEqualNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    168 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreater, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    169 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    170 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreater, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    171 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    172 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    173 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    174 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    175 => {
                        if (58..=58).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    176 => {
                        if (59..=72).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    177 => {
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    178 => {
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    179 => {
                        if (73..=73).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    180 => {
                        if (80..=80).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JGreaterEqualN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    181 => {
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JGreaterEqualNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    182 => {
                        if (81..=81).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotGreaterEqualN, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    183 => {
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotGreaterEqualNLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    184 => {
                        if (82..=85).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    185 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    186 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JNotEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    187 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JNotEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    188 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divi32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    189 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divu32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    190 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi8, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divi32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr8_Reg8_Reg8!(JStrictNotEqual, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    191 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu8, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divu32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Addr32_Reg8_Reg8!(JStrictNotEqualLong, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    192 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi16, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi8, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Add32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    193 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu16, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu8, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divi32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Sub32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    194 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi16, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divu32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Mul32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    195 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu16, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi8, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divi32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    196 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store8, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu8, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Divu32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    197 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store16, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi16, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi8, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    198 => {
                        if (84..=85).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store32, bytes, offset);
                        }
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store8, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu16, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu8, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    199 => {
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store16, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi16, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    200 => {
                        if (86..=86).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store32, bytes, offset);
                        }
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu16, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    201 => {
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store8, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadi32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    202 => {
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store16, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Loadu32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    203 => {
                        if (87..=90).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store32, bytes, offset);
                        }
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store8, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    204 => {
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store16, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    205 => {
                        if (92..=96).contains(&version) {
                            return OPERAND3_Reg8_Reg8_Reg8!(Store32, bytes, offset);
                        }
                        Err(anyhow::anyhow!("Unknown instruction for opcode {} in version {}", opcode, version))
                    },
                    _ => Err(anyhow::anyhow!("Unknown opcode {} for version {}", opcode, version)),
                }
            }
        }
    };
}
define_instructions! {
    CreateGeneratorLongIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Logical"
    },
    CreateAsyncClosure {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Other"
    },
    GreaterEq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    CreateGenerator {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Logical"
    },
    PutOwnGetterSetterByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8, operand_4: u8],
        category: "PropertyAccess"
    },
    Unreachable {
        operands: [],
        category: "Other"
    },
    LoadConstFalse {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    BitAnd {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    DirectEval {
        operands: [operand_0: u8, operand_1: u8],
        category: "Other"
    },
    JNotGreaterEqualN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    GetBuiltinClosure {
        operands: [operand_0: u8, operand_1: u8],
        category: "PropertyAccess"
    },
    Not {
        operands: [operand_0: u8, operand_1: u8],
        category: "Logical"
    },
    PutNewOwnByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "PropertyAccess"
    },
    LoadConstString {
        operands: [operand_0: u8, operand_1: u16],
        category: "ConstantLoad"
    },
    LoadConstUInt8 {
        operands: [operand_0: u8, operand_1: u8],
        category: "ConstantLoad"
    },
    DeclareGlobalVar {
        operands: [operand_0: u32],
        category: "Environment"
    },
    StoreToEnvironmentL {
        operands: [operand_0: u8, operand_1: u16, operand_2: u8],
        category: "Logical"
    },
    JNotGreater {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    AddEmptyString {
        operands: [operand_0: u8, operand_1: u8],
        category: "Arithmetic"
    },
    CreateGeneratorClosureLongIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Logical"
    },
    StoreNPToEnvironment {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    CreateRegExp {
        operands: [operand_0: u8, operand_1: u32, operand_2: u32, operand_3: u32],
        category: "Other"
    },
    Loadu32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    LoadConstBigInt {
        operands: [operand_0: u8, operand_1: u16],
        category: "ConstantLoad"
    },
    CallLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Call"
    },
    JLessEqualN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    GetGlobalObject {
        operands: [operand_0: u8],
        category: "PropertyAccess"
    },
    GetArgumentsLength {
        operands: [operand_0: u8, operand_1: u8],
        category: "PropertyAccess"
    },
    MulN {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    LoadFromEnvironmentL {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Environment"
    },
    Sub {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    DelById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "PropertyAccess"
    },
    Construct {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Call"
    },
    ConstructLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Call"
    },
    LoadConstZero {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    JmpUndefined {
        operands: [operand_0: i8, operand_1: u8],
        category: "Jump"
    },
    JLessEqualNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JGreater {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotGreaterEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JGreaterEqualNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Loadu8 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    TryPutById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u16],
        category: "PropertyAccess"
    },
    JNotLessEqualNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JGreaterEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    StoreToEnvironment {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    SubN {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    Neq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    GetByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    GetNextPName {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8, operand_4: u8],
        category: "PropertyAccess"
    },
    BitOr {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    JNotGreaterLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    NewArray {
        operands: [operand_0: u8, operand_1: u16],
        category: "ObjectCreation"
    },
    LoadConstTrue {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    Call {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Call"
    },
    LoadFromEnvironment {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Environment"
    },
    DelByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    CallDirectLongIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Call"
    },
    LShift {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    JNotGreaterEqualNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    BitNot {
        operands: [operand_0: u8, operand_1: u8],
        category: "Bitwise"
    },
    Eq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    JNotLessEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    SaveGeneratorLong {
        operands: [operand_0: i32],
        category: "Logical"
    },
    IteratorNext {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    NewObjectWithParent {
        operands: [operand_0: u8, operand_1: u8],
        category: "ObjectCreation"
    },
    PutByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    SwitchImm {
        operands: [operand_0: u8, operand_1: u32, operand_2: i32, operand_3: u32, operand_4: u32],
        category: "Jump"
    },
    LoadConstStringLongIndex {
        operands: [operand_0: u8, operand_1: u32],
        category: "ConstantLoad"
    },
    ThrowIfEmpty {
        operands: [operand_0: u8, operand_1: u8],
        category: "Exception"
    },
    StrictEq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    LoadConstNull {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    JmpUndefinedLong {
        operands: [operand_0: i32, operand_1: u8],
        category: "Jump"
    },
    JmpTrueLong {
        operands: [operand_0: i32, operand_1: u8],
        category: "Jump"
    },
    Add {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    LoadThisNS {
        operands: [operand_0: u8],
        category: "Variable"
    },
    LoadConstDouble {
        operands: [operand_0: u8, operand_1: f64],
        category: "ConstantLoad"
    },
    GetByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u32],
        category: "PropertyAccess"
    },
    MovLong {
        operands: [operand_0: u32, operand_1: u32],
        category: "Variable"
    },
    AddN {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    PutNewOwnById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "PropertyAccess"
    },
    Call2 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8],
        category: "Call"
    },
    Debugger {
        operands: [],
        category: "Debug"
    },
    CreateClosureLongIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Comparison"
    },
    CreateThis {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Other"
    },
    PutNewOwnByIdShort {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    IteratorClose {
        operands: [operand_0: u8, operand_1: u8],
        category: "Logical"
    },
    JLessNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotLessN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Call4 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8, operand_4: u8, operand_5: u8],
        category: "Call"
    },
    TryGetById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u16],
        category: "PropertyAccess"
    },
    Mul32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    Throw {
        operands: [operand_0: u8],
        category: "Exception"
    },
    Store8 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    StrictNeq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    ToNumber {
        operands: [operand_0: u8, operand_1: u8],
        category: "TypeConversion"
    },
    Call3 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8, operand_4: u8],
        category: "Call"
    },
    CreateClosure {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Other"
    },
    Inc {
        operands: [operand_0: u8, operand_1: u8],
        category: "Comparison"
    },
    Mod {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    CreateGeneratorClosure {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Logical"
    },
    ThrowIfHasRestrictedGlobalProperty {
        operands: [operand_0: u32],
        category: "Exception"
    },
    TryGetByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u32],
        category: "PropertyAccess"
    },
    StartGenerator {
        operands: [],
        category: "Logical"
    },
    Divu32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    JEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    NewObject {
        operands: [operand_0: u8],
        category: "ObjectCreation"
    },
    Greater {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    JNotLessEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    CreateInnerEnvironment {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Comparison"
    },
    JGreaterEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Div {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    JNotLessEqualN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Loadu16 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    Dec {
        operands: [operand_0: u8, operand_1: u8],
        category: "Other"
    },
    ProfilePoint {
        operands: [operand_0: u16],
        category: "Comparison"
    },
    JGreaterNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    NewArrayWithBufferLong {
        operands: [operand_0: u8, operand_1: u16, operand_2: u16, operand_3: u32],
        category: "ObjectCreation"
    },
    ToNumeric {
        operands: [operand_0: u8, operand_1: u8],
        category: "TypeConversion"
    },
    JStrictNotEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotLess {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Loadi8 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    LoadParamLong {
        operands: [operand_0: u8, operand_1: u32],
        category: "Variable"
    },
    URshift {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    JLess {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotGreaterNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    CallBuiltinLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Call"
    },
    LoadConstBigIntLongIndex {
        operands: [operand_0: u8, operand_1: u32],
        category: "ConstantLoad"
    },
    JStrictEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Call1 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Call"
    },
    JmpFalse {
        operands: [operand_0: i8, operand_1: u8],
        category: "Jump"
    },
    JmpLong {
        operands: [operand_0: i32],
        category: "Jump"
    },
    JLessEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    PutNewOwnNEByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "PropertyAccess"
    },
    InstanceOf {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    JNotLessNLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    GetPNameList {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8],
        category: "PropertyAccess"
    },
    JNotGreaterEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    LoadConstUndefined {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    ThrowIfUndefinedInst {
        operands: [operand_0: u8],
        category: "Exception"
    },
    NewObjectWithBufferLong {
        operands: [operand_0: u8, operand_1: u16, operand_2: u16, operand_3: u32, operand_4: u32],
        category: "ObjectCreation"
    },
    GetById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u16],
        category: "PropertyAccess"
    },
    NewArrayWithBuffer {
        operands: [operand_0: u8, operand_1: u16, operand_2: u16, operand_3: u16],
        category: "ObjectCreation"
    },
    JmpTrue {
        operands: [operand_0: i8, operand_1: u8],
        category: "Jump"
    },
    JGreaterEqualN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    IteratorBegin {
        operands: [operand_0: u8, operand_1: u8],
        category: "Logical"
    },
    LoadParam {
        operands: [operand_0: u8, operand_1: u8],
        category: "Variable"
    },
    TryPutByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u32],
        category: "PropertyAccess"
    },
    Loadi16 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    CreateAsyncClosureLongIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "Comparison"
    },
    JGreaterLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    GetArgumentsPropByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    DebuggerCheckBreak {
        operands: [],
        category: "Debug"
    },
    JmpFalseLong {
        operands: [operand_0: i32, operand_1: u8],
        category: "Jump"
    },
    LessEq {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    ReifyArguments {
        operands: [operand_0: u8],
        category: "Other"
    },
    SaveGenerator {
        operands: [operand_0: i8],
        category: "Logical"
    },
    Add32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    Store32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    SelectObject {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "TypeConversion"
    },
    Mul {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    PutOwnByIndex {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "PropertyAccess"
    },
    PutOwnByIndexL {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "PropertyAccess"
    },
    CallBuiltin {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Call"
    },
    JGreaterN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JNotGreaterN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    PutById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u16],
        category: "PropertyAccess"
    },
    Ret {
        operands: [operand_0: u8],
        category: "Return"
    },
    LoadConstEmpty {
        operands: [operand_0: u8],
        category: "ConstantLoad"
    },
    CreateEnvironment {
        operands: [operand_0: u8],
        category: "Environment"
    },
    LoadConstInt {
        operands: [operand_0: u8, operand_1: u32],
        category: "ConstantLoad"
    },
    CallDirect {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "Call"
    },
    CompleteGenerator {
        operands: [],
        category: "Logical"
    },
    Divi32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    JStrictEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Less {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    BitXor {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    AsyncBreakCheck {
        operands: [],
        category: "Other"
    },
    Mov {
        operands: [operand_0: u8, operand_1: u8],
        category: "Variable"
    },
    Negate {
        operands: [operand_0: u8, operand_1: u8],
        category: "Arithmetic"
    },
    GetNewTarget {
        operands: [operand_0: u8],
        category: "PropertyAccess"
    },
    CoerceThisNS {
        operands: [operand_0: u8, operand_1: u8],
        category: "Other"
    },
    PutOwnByVal {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8],
        category: "PropertyAccess"
    },
    JLessEqual {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    DivN {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    Catch {
        operands: [operand_0: u8],
        category: "Exception"
    },
    GetEnvironment {
        operands: [operand_0: u8, operand_1: u8],
        category: "PropertyAccess"
    },
    Jmp {
        operands: [operand_0: i8],
        category: "Jump"
    },
    ResumeGenerator {
        operands: [operand_0: u8, operand_1: u8],
        category: "Logical"
    },
    Sub32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Arithmetic"
    },
    JNotLessLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    PutByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u32],
        category: "PropertyAccess"
    },
    RShift {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Bitwise"
    },
    IsIn {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Comparison"
    },
    PutNewOwnNEById {
        operands: [operand_0: u8, operand_1: u8, operand_2: u16],
        category: "PropertyAccess"
    },
    JEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    JLessLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Loadi32 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Variable"
    },
    TypeOf {
        operands: [operand_0: u8, operand_1: u8],
        category: "TypeConversion"
    },
    JStrictNotEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    NewObjectWithBuffer {
        operands: [operand_0: u8, operand_1: u16, operand_2: u16, operand_3: u16, operand_4: u16],
        category: "ObjectCreation"
    },
    StoreNPToEnvironmentL {
        operands: [operand_0: u8, operand_1: u16, operand_2: u8],
        category: "Logical"
    },
    ToInt32 {
        operands: [operand_0: u8, operand_1: u8],
        category: "Comparison"
    },
    GetByIdShort {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8, operand_3: u8],
        category: "PropertyAccess"
    },
    JNotEqualLong {
        operands: [operand_0: i32, operand_1: u8, operand_2: u8],
        category: "Jump"
    },
    Store16 {
        operands: [operand_0: u8, operand_1: u8, operand_2: u8],
        category: "Logical"
    },
    DelByIdLong {
        operands: [operand_0: u8, operand_1: u8, operand_2: u32],
        category: "PropertyAccess"
    },
    JLessN {
        operands: [operand_0: i8, operand_1: u8, operand_2: u8],
        category: "Jump"
    }
}
