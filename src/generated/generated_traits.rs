// Auto-generated traits and version registry module.
// This file is generated by `build.rs` - do not edit manually.

use crate::hbc::instructions::versions::{HbcVersion, VersionRegistry};
use std::collections::HashMap;
use once_cell::sync::Lazy;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum InstructionCategory {
    ObjectCreation,
    Debug,
    Return,
    Other,
    Arithmetic,
    Logical,
    Bitwise,
    TypeConversion,
    Variable,
    Comparison,
    Exception,
    PropertyAccess,
    Jump,
    Environment,
    ConstantLoad,
    Call,
}

pub fn get_category_from_name(instruction_name: &str) -> InstructionCategory {
    match instruction_name {
        "Loadu8" => InstructionCategory::Variable,
        "GetArgumentsLength" => InstructionCategory::PropertyAccess,
        "SaveGenerator" => InstructionCategory::Logical,
        "SubN" => InstructionCategory::Arithmetic,
        "Greater" => InstructionCategory::Comparison,
        "Mod" => InstructionCategory::Arithmetic,
        "JNotGreaterNLong" => InstructionCategory::Jump,
        "JNotEqual" => InstructionCategory::Jump,
        "Mul32" => InstructionCategory::Arithmetic,
        "JGreaterEqual" => InstructionCategory::Jump,
        "LoadConstBigIntLongIndex" => InstructionCategory::ConstantLoad,
        "NewObjectWithBufferLong" => InstructionCategory::ObjectCreation,
        "NewArrayWithBuffer" => InstructionCategory::ObjectCreation,
        "IsIn" => InstructionCategory::Comparison,
        "StoreNPToEnvironmentL" => InstructionCategory::Logical,
        "JGreaterEqualN" => InstructionCategory::Jump,
        "GetBuiltinClosure" => InstructionCategory::PropertyAccess,
        "StrictEq" => InstructionCategory::Comparison,
        "Divi32" => InstructionCategory::Arithmetic,
        "LShift" => InstructionCategory::Bitwise,
        "Inc" => InstructionCategory::Comparison,
        "ToNumeric" => InstructionCategory::TypeConversion,
        "Loadu16" => InstructionCategory::Variable,
        "AsyncBreakCheck" => InstructionCategory::Other,
        "GetByIdLong" => InstructionCategory::PropertyAccess,
        "StartGenerator" => InstructionCategory::Logical,
        "GreaterEq" => InstructionCategory::Comparison,
        "CreateGenerator" => InstructionCategory::Logical,
        "JLessLong" => InstructionCategory::Jump,
        "JNotLess" => InstructionCategory::Jump,
        "JNotGreaterEqualLong" => InstructionCategory::Jump,
        "PutByVal" => InstructionCategory::PropertyAccess,
        "Debugger" => InstructionCategory::Debug,
        "ReifyArguments" => InstructionCategory::Other,
        "LoadConstFalse" => InstructionCategory::ConstantLoad,
        "LoadFromEnvironment" => InstructionCategory::Environment,
        "AddN" => InstructionCategory::Arithmetic,
        "CallLong" => InstructionCategory::Call,
        "NewObjectWithParent" => InstructionCategory::ObjectCreation,
        "JNotLessEqualN" => InstructionCategory::Jump,
        "JmpUndefinedLong" => InstructionCategory::Jump,
        "JEqual" => InstructionCategory::Jump,
        "ConstructLong" => InstructionCategory::Call,
        "PutById" => InstructionCategory::PropertyAccess,
        "Unreachable" => InstructionCategory::Other,
        "Sub" => InstructionCategory::Arithmetic,
        "BitOr" => InstructionCategory::Bitwise,
        "TypeOf" => InstructionCategory::TypeConversion,
        "GetByIdShort" => InstructionCategory::PropertyAccess,
        "NewArrayWithBufferLong" => InstructionCategory::ObjectCreation,
        "TryPutByIdLong" => InstructionCategory::PropertyAccess,
        "GetNewTarget" => InstructionCategory::PropertyAccess,
        "JNotLessN" => InstructionCategory::Jump,
        "GetNextPName" => InstructionCategory::PropertyAccess,
        "PutNewOwnNEById" => InstructionCategory::PropertyAccess,
        "JNotGreaterEqual" => InstructionCategory::Jump,
        "DelById" => InstructionCategory::PropertyAccess,
        "ThrowIfUndefinedInst" => InstructionCategory::Exception,
        "Loadu32" => InstructionCategory::Variable,
        "LoadThisNS" => InstructionCategory::Variable,
        "Store8" => InstructionCategory::Logical,
        "StoreToEnvironment" => InstructionCategory::Return,
        "JStrictEqual" => InstructionCategory::Jump,
        "JStrictEqualLong" => InstructionCategory::Jump,
        "StoreToEnvironmentL" => InstructionCategory::Return,
        "JLessEqualNLong" => InstructionCategory::Jump,
        "TryPutById" => InstructionCategory::PropertyAccess,
        "Throw" => InstructionCategory::Exception,
        "JNotLessEqualNLong" => InstructionCategory::Jump,
        "PutNewOwnByIdLong" => InstructionCategory::PropertyAccess,
        "PutOwnByVal" => InstructionCategory::PropertyAccess,
        "Ret" => InstructionCategory::Return,
        "NewArray" => InstructionCategory::ObjectCreation,
        "JGreaterNLong" => InstructionCategory::Jump,
        "LoadConstBigInt" => InstructionCategory::ConstantLoad,
        "Call3" => InstructionCategory::Call,
        "JStrictNotEqualLong" => InstructionCategory::Jump,
        "ThrowIfHasRestrictedGlobalProperty" => InstructionCategory::Exception,
        "JmpTrue" => InstructionCategory::Jump,
        "LoadParam" => InstructionCategory::Variable,
        "NewObjectWithBuffer" => InstructionCategory::ObjectCreation,
        "CoerceThisNS" => InstructionCategory::Other,
        "Negate" => InstructionCategory::Arithmetic,
        "JmpLong" => InstructionCategory::Jump,
        "JGreaterEqualLong" => InstructionCategory::Jump,
        "LoadConstDouble" => InstructionCategory::ConstantLoad,
        "Neq" => InstructionCategory::Comparison,
        "Catch" => InstructionCategory::Exception,
        "JGreaterEqualNLong" => InstructionCategory::Jump,
        "PutOwnByIndexL" => InstructionCategory::PropertyAccess,
        "LoadFromEnvironmentL" => InstructionCategory::Environment,
        "ToNumber" => InstructionCategory::TypeConversion,
        "Less" => InstructionCategory::Comparison,
        "GetById" => InstructionCategory::PropertyAccess,
        "CallDirect" => InstructionCategory::Call,
        "Mov" => InstructionCategory::Variable,
        "JLessEqualLong" => InstructionCategory::Jump,
        "DelByIdLong" => InstructionCategory::PropertyAccess,
        "Div" => InstructionCategory::Arithmetic,
        "InstanceOf" => InstructionCategory::Comparison,
        "JmpFalse" => InstructionCategory::Jump,
        "JLessN" => InstructionCategory::Jump,
        "CompleteGenerator" => InstructionCategory::Logical,
        "IteratorBegin" => InstructionCategory::Logical,
        "CallBuiltinLong" => InstructionCategory::Call,
        "CreateClosure" => InstructionCategory::Other,
        "Loadi16" => InstructionCategory::Variable,
        "Loadi32" => InstructionCategory::Variable,
        "StoreNPToEnvironment" => InstructionCategory::Logical,
        "JNotLessEqual" => InstructionCategory::Jump,
        "JNotGreaterLong" => InstructionCategory::Jump,
        "PutNewOwnById" => InstructionCategory::PropertyAccess,
        "GetByVal" => InstructionCategory::PropertyAccess,
        "Call1" => InstructionCategory::Call,
        "BitAnd" => InstructionCategory::Bitwise,
        "LoadConstString" => InstructionCategory::ConstantLoad,
        "GetPNameList" => InstructionCategory::PropertyAccess,
        "AddEmptyString" => InstructionCategory::Arithmetic,
        "Construct" => InstructionCategory::Call,
        "JNotLessLong" => InstructionCategory::Jump,
        "CreateEnvironment" => InstructionCategory::Environment,
        "JLessEqualN" => InstructionCategory::Jump,
        "Not" => InstructionCategory::Logical,
        "JGreater" => InstructionCategory::Jump,
        "Add32" => InstructionCategory::Arithmetic,
        "SwitchImm" => InstructionCategory::Jump,
        "Loadi8" => InstructionCategory::Variable,
        "LessEq" => InstructionCategory::Comparison,
        "Call4" => InstructionCategory::Call,
        "Dec" => InstructionCategory::Other,
        "Call" => InstructionCategory::Call,
        "BitNot" => InstructionCategory::Bitwise,
        "Add" => InstructionCategory::Arithmetic,
        "JGreaterLong" => InstructionCategory::Jump,
        "TryGetByIdLong" => InstructionCategory::PropertyAccess,
        "PutByIdLong" => InstructionCategory::PropertyAccess,
        "JmpTrueLong" => InstructionCategory::Jump,
        "PutNewOwnByIdShort" => InstructionCategory::PropertyAccess,
        "ToInt32" => InstructionCategory::Comparison,
        "DivN" => InstructionCategory::Arithmetic,
        "CreateClosureLongIndex" => InstructionCategory::Comparison,
        "Eq" => InstructionCategory::Comparison,
        "PutNewOwnNEByIdLong" => InstructionCategory::PropertyAccess,
        "JLess" => InstructionCategory::Jump,
        "Store32" => InstructionCategory::Logical,
        "Store16" => InstructionCategory::Logical,
        "CreateAsyncClosureLongIndex" => InstructionCategory::Comparison,
        "ProfilePoint" => InstructionCategory::Comparison,
        "JmpFalseLong" => InstructionCategory::Jump,
        "CreateRegExp" => InstructionCategory::Other,
        "JGreaterN" => InstructionCategory::Jump,
        "Jmp" => InstructionCategory::Jump,
        "NewObject" => InstructionCategory::ObjectCreation,
        "DebuggerCheckBreak" => InstructionCategory::Debug,
        "SelectObject" => InstructionCategory::TypeConversion,
        "JStrictNotEqual" => InstructionCategory::Jump,
        "DirectEval" => InstructionCategory::Other,
        "Divu32" => InstructionCategory::Arithmetic,
        "LoadConstInt" => InstructionCategory::ConstantLoad,
        "PutOwnByIndex" => InstructionCategory::PropertyAccess,
        "MulN" => InstructionCategory::Arithmetic,
        "CreateAsyncClosure" => InstructionCategory::Other,
        "IteratorClose" => InstructionCategory::Logical,
        "CreateInnerEnvironment" => InstructionCategory::Comparison,
        "CallDirectLongIndex" => InstructionCategory::Call,
        "LoadParamLong" => InstructionCategory::Variable,
        "JNotLessEqualLong" => InstructionCategory::Jump,
        "BitXor" => InstructionCategory::Bitwise,
        "TryGetById" => InstructionCategory::PropertyAccess,
        "JNotEqualLong" => InstructionCategory::Jump,
        "MovLong" => InstructionCategory::Variable,
        "URshift" => InstructionCategory::Bitwise,
        "CreateGeneratorLongIndex" => InstructionCategory::Logical,
        "JNotGreaterEqualN" => InstructionCategory::Jump,
        "Sub32" => InstructionCategory::Arithmetic,
        "JmpUndefined" => InstructionCategory::Jump,
        "LoadConstUInt8" => InstructionCategory::ConstantLoad,
        "Mul" => InstructionCategory::Arithmetic,
        "GetGlobalObject" => InstructionCategory::PropertyAccess,
        "RShift" => InstructionCategory::Bitwise,
        "DeclareGlobalVar" => InstructionCategory::Environment,
        "JLessEqual" => InstructionCategory::Jump,
        "CreateGeneratorClosureLongIndex" => InstructionCategory::Logical,
        "IteratorNext" => InstructionCategory::Logical,
        "PutOwnGetterSetterByVal" => InstructionCategory::PropertyAccess,
        "CreateGeneratorClosure" => InstructionCategory::Logical,
        "ThrowIfEmpty" => InstructionCategory::Exception,
        "LoadConstStringLongIndex" => InstructionCategory::ConstantLoad,
        "GetArgumentsPropByVal" => InstructionCategory::PropertyAccess,
        "JNotLessNLong" => InstructionCategory::Jump,
        "GetEnvironment" => InstructionCategory::PropertyAccess,
        "JNotGreater" => InstructionCategory::Jump,
        "SaveGeneratorLong" => InstructionCategory::Logical,
        "CreateThis" => InstructionCategory::Other,
        "ResumeGenerator" => InstructionCategory::Logical,
        "LoadConstUndefined" => InstructionCategory::ConstantLoad,
        "DelByVal" => InstructionCategory::PropertyAccess,
        "LoadConstTrue" => InstructionCategory::ConstantLoad,
        "Call2" => InstructionCategory::Call,
        "LoadConstZero" => InstructionCategory::ConstantLoad,
        "StrictNeq" => InstructionCategory::Comparison,
        "CallBuiltin" => InstructionCategory::Call,
        "JLessNLong" => InstructionCategory::Jump,
        "JNotGreaterEqualNLong" => InstructionCategory::Jump,
        "JEqualLong" => InstructionCategory::Jump,
        "LoadConstNull" => InstructionCategory::ConstantLoad,
        "JNotGreaterN" => InstructionCategory::Jump,
        "LoadConstEmpty" => InstructionCategory::ConstantLoad,
        _ => InstructionCategory::Other,
    }
}

pub fn is_jump_instruction(instruction_name: &str) -> bool { matches!(get_category_from_name(instruction_name), InstructionCategory::Jump) }

pub fn is_call_instruction(instruction_name: &str) -> bool { matches!(get_category_from_name(instruction_name), InstructionCategory::Call) }

pub fn is_return_instruction(instruction_name: &str) -> bool { matches!(get_category_from_name(instruction_name), InstructionCategory::Return) }

pub fn can_throw_instruction(instruction_name: &str) -> bool {
    matches!(get_category_from_name(instruction_name), InstructionCategory::Exception | InstructionCategory::PropertyAccess | InstructionCategory::Arithmetic | InstructionCategory::Bitwise | InstructionCategory::Logical | InstructionCategory::Comparison | InstructionCategory::TypeConversion)
}

static VERSION_DATA: Lazy<HashMap<u32, HbcVersion>> = Lazy::new(|| {
    let mut map = HashMap::new();
    map.insert(51, HbcVersion { version: 51, tag: Some("v0.0.1".to_string()), commit: None, release_date: None });
    map.insert(58, HbcVersion { version: 58, tag: Some("v0.0.3".to_string()), commit: None, release_date: None });
    map.insert(59, HbcVersion { version: 59, tag: Some("v0.1.0".to_string()), commit: None, release_date: None });
    map.insert(61, HbcVersion { version: 61, tag: None, commit: Some("ee7a2db".to_string()), release_date: Some("2019-08-03".to_string()) });
    map.insert(62, HbcVersion { version: 62, tag: Some("v0.2.1".to_string()), commit: None, release_date: Some("2019-08-29".to_string()) });
    map.insert(68, HbcVersion { version: 68, tag: None, commit: Some("883eb4d".to_string()), release_date: Some("2019-10-15".to_string()) });
    map.insert(69, HbcVersion { version: 69, tag: None, commit: Some("5a402ac".to_string()), release_date: Some("2019-10-15".to_string()) });
    map.insert(70, HbcVersion { version: 70, tag: None, commit: Some("51969f2".to_string()), release_date: Some("2019-10-15".to_string()) });
    map.insert(72, HbcVersion { version: 72, tag: None, commit: Some("d1637f2".to_string()), release_date: Some("2019-11-26".to_string()) });
    map.insert(73, HbcVersion { version: 73, tag: None, commit: Some("ecded4d".to_string()), release_date: Some("2019-12-19".to_string()) });
    map.insert(80, HbcVersion { version: 80, tag: None, commit: Some("e70045d".to_string()), release_date: Some("2021-01-13".to_string()) });
    map.insert(81, HbcVersion { version: 81, tag: None, commit: Some("40aa0f7".to_string()), release_date: Some("2021-01-14".to_string()) });
    map.insert(82, HbcVersion { version: 82, tag: None, commit: Some("65de349".to_string()), release_date: Some("2021-01-26".to_string()) });
    map.insert(83, HbcVersion { version: 83, tag: Some("v0.8.0".to_string()), commit: None, release_date: Some("2021-04-29".to_string()) });
    map.insert(84, HbcVersion { version: 84, tag: Some("v0.9.0".to_string()), commit: None, release_date: Some("2021-09-02".to_string()) });
    map.insert(85, HbcVersion { version: 85, tag: Some("v0.11.0".to_string()), commit: None, release_date: Some("2022-01-27".to_string()) });
    map.insert(86, HbcVersion { version: 86, tag: None, commit: Some("b823515".to_string()), release_date: Some("2022-06-28".to_string()) });
    map.insert(87, HbcVersion { version: 87, tag: None, commit: Some("41752c6".to_string()), release_date: Some("2022-07-09".to_string()) });
    map.insert(89, HbcVersion { version: 89, tag: Some("v0.12.0".to_string()), commit: None, release_date: Some("2022-08-24".to_string()) });
    map.insert(90, HbcVersion { version: 90, tag: None, commit: Some("0763eee".to_string()), release_date: Some("2022-10-07".to_string()) });
    map.insert(92, HbcVersion { version: 92, tag: None, commit: Some("b544ff4".to_string()), release_date: Some("2023-02-14".to_string()) });
    map.insert(95, HbcVersion { version: 95, tag: None, commit: Some("f6b56d3".to_string()), release_date: Some("2023-03-29".to_string()) });
    map.insert(96, HbcVersion { version: 96, tag: None, commit: Some("e0fc671".to_string()), release_date: Some("2023-08-16".to_string()) });
    map
});

pub static VERSION_REGISTRY: Lazy<VersionRegistry> = Lazy::new(|| {
    let mut registry = VersionRegistry::new();
    for version in VERSION_DATA.values() {
        registry.add_version(version.clone());
    }
    registry
});

pub fn get_version_registry() -> &'static VersionRegistry { &VERSION_REGISTRY }

pub fn is_version_supported(version: u32) -> bool { VERSION_REGISTRY.is_supported(version) }

pub fn supported_versions() -> Vec<u32> { VERSION_REGISTRY.versions().map(|v| v.version).collect() }

pub fn min_supported_version() -> u32 { 51 }

pub fn max_supported_version() -> u32 { 96 }
