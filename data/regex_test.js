// regex_test.js
// ------------------------------------------------------------
// A zoo of regular-expressions for byte-code / disassembler
// experiments.  Run with any modern JS engine (Node ≥ 12,
// d8, jsc, etc.) or simply `node regex_test.js`.
//
// Each pattern is executed once to make sure the engine really
// instantiates it at run-time (handy when you later dump or
// disassemble the generated byte-code).
// ------------------------------------------------------------
"use strict";

/*  Utility used below just to make sure the code runs ‑-
    not important for your disassembler work                   */
function run(name, re, sample) {
  const ok = re.test(sample);
  globalThis.console.log(
    `${name.padEnd(20)} : ${String(ok).toUpperCase()}  \t→ ${re}`,
  );
}

/* 30 very different regex literals                            */
const cases = [
  //  1. Simple digits
  ["digits", /\d+/, "12345"],

  //  2. A basic word (ASCII letters only)
  ["asciiWord", /\b[A-Za-z]+\b/, "hello"],

  //  3. RFC-ish e-mail
  ["email", /^[\w.+-]+@[\w.-]+\.[A-Za-z]{2,}$/, "me@example.com"],

  //  4. HTTP/HTTPS URL (case-insensitive)
  [
    "httpURL",
    /^(?:https?):\/\/(www\.)?[^\s/$.?#].[^\s]*$/i,
    "https://example.org/path",
  ],

  //  5. IPv4 address
  ["ipv4", /^(\d{1,3}\.){3}\d{1,3}$/, "192.168.0.42"],

  //  6. MAC address (hex octets)
  ["macAddr", /^([0-9a-f]{2}:){5}[0-9a-f]{2}$/i, "aa:bb:cc:dd:ee:ff"],

  //  7. US phone number (plenty of optional punctuation)
  [
    "usPhone",
    /^(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*\d{3}\s*\)|\d{3})\s*(?:[.-]\s*)?\d{3}\s*(?:[.-]\s*)?\d{4}$/,
    "(123)-456-7890",
  ],

  //  8. Trimming leading OR trailing whitespace (uses alternation + global)
  ["trimWS", /^\s+|\s+$/g, "  padded  "],

  //  9. Back-reference (double letters)
  ["doubleLetter", /(\w)\1+/, "boooook"],

  // 10. Nested capture with multiple back-refs
  ["nestedBackRefs", /(a(b(c)))\3\2\1/, "abccba"],

  // 11. Named capturing groups (ISO date)
  ["namedDate", /^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})$/, "2023-04-01"],

  // 12. Positive look-behind
  ["posLookbehind", /(?<=foo)\w+/, "foobarbaz"],

  // 13. Negative look-ahead & behind around exactly three digits
  ["isoThreeDigits", /(?<!\d)\d{3}(?!\d)/, "abc123def"],

  // 14. Negative tempered greedy token (match until 'abc' appears)
  ["temperedGreedy", /(?:(?!abc).)*/s, "xyzabc"],

  // 15. Unicode property escape – any emoji that has default presentation
  ["emojiProp", /\p{Emoji_Presentation}/u, "😀"],

  // 16. Explicit code point escape (grinning face)
  ["emojiCodepoint", /\u{1F600}/u, "😀"],

  // 17. Hashtag (requires whitespace or start-of-string before #)
  ["hashtag", /(?<=^|\s)#[\w]+\b/, "tweet with #hashtag"],

  // 18. Currency number with optional commas & decimals
  ["money", /(\d{1,3}(,\d{3})*)(\.\d+)?/, "1,234,567.89"],

  // 19. Password must not contain “cat” or “dog” (negative look-ahead)
  ["noPetsPwd", /^(?!.*\b(cat|dog)\b).{6,}$/i, "ilovecoffee"],

  // 20. Dot-all + size limit (0-5 codepoints)
  ["dotAllMax5", /^.{0,5}$/s, "abc"],

  // 21. Sticky (‘y’) – must begin at lastIndex
  ["sticky_abc", /abc/y, "abcabc"],

  // 22. Global A-Z search
  ["AZ_global", /[A-Z]+/g, "ABCdefGHI"],

  // 23. ‘g’+‘y’ together (rare, but legal)
  ["gyCombo", /a+/gy, "aaaaa"],

  // 24. Tempered IPv6 hex chunk (simplified) with repeating quantifier
  [
    "ipv6Chunk",
    /(?:[0-9a-f]{1,4}:){7}[0-9a-f]{1,4}/i,
    "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
  ],

  // 25. Look-ahead conditional (pseudo password policy)
  ["pwdPolicy", /^(?=\D*\d)(?=.*[A-Z])(?=.*[a-z]).{8,}$/, "Abcdef1g"],

  // 26. ESM import detection (non-capturing + multiline flag)
  [
    "importStmt",
    /^\s*import\s+[\s\S]+?from\s+['"].+?['"];?$/m,
    "import fs from 'node:fs';",
  ],

  // 27. CSS rgb()/rgba() color (optional alpha)
  [
    "cssRGB",
    /^rgba?\(\s*(\d{1,3}%?\s*,\s*){2}\d{1,3}%?\s*(?:,\s*(0|1|0?\.\d+))?\)$/,
    "rgba(255, 0, 0, 0.5)",
  ],

  // 28. Escaped forward slash in literal (must use \/)
  ["escapedSlash", /foo\/bar/, "foo/bar"],

  // 29. JavaScript identifier (Unicode ID_Continue, requires ‘u’)
  ["jsIdent", /[$_\p{ID_Start}][$_\u200C\u200D\p{ID_Continue}]*/u, "πValue"],
];

/* ------------------------------------------------------------ */
for (const [name, re, sample] of cases) {
  try {
    run(name, re, sample);
  } catch (e) {
    globalThis.console.error(`${name}  ‑->  threw:`, e.message);
  }
}
/* ------------------------------------------------------------ */
